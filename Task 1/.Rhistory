plot_list[[1]] <- p
}
return(plot_list)
}
# Generate and print time series plots for inputs (x1, x3, x4, x5)
input_plots <- time_series_plots(input_columns, time_variable, input = TRUE)
output_plots <- time_series_plots(output_column, time_variable, input = FALSE)
# Display input plots
for (p in input_plots) {
print(p)
}
# Display output plot (x2)
for (p in output_plots) {
print(p)
}
# Distribution Plots for input columns (x1, x3, x4, x5)
distribution_plots <- function(data) {
plot_list <- list()
for (i in 1:ncol(data)) {
p <- ggplot(data = data.frame(Value = data[, i]),
aes(x = Value)) +
geom_histogram(bins = 20, fill = "blue", color = "black", alpha = 0.7) +
ggtitle(paste("Distribution of", colnames(data)[i])) +
xlab("Expression Level") +
ylab("Frequency") +
theme_minimal()
plot_list[[i]] <- p
}
return(plot_list)
}
# Generate and display distribution plots for input columns
dist_plots <- distribution_plots(input_columns)
for (p in dist_plots) {
print(p)
}
# Distribution plot for the output (x2)
output_dist_plot <- ggplot(data = data.frame(Value = output_column), aes(x = Value)) +
geom_histogram(bins = 20, fill = "red", color = "black", alpha = 0.7) +
ggtitle("Distribution of Output - x2") +
xlab("Output (x2)") +
ylab("Frequency") +
theme_minimal()
# Display output distribution plot
print(output_dist_plot)
# Compute the correlation matrix for the selected columns
correlation_matrix <- cor(input_columns)
# Print the correlation matrix
print("Correlation Matrix:")
print(correlation_matrix)
# Scatter plots using GGpairs to visualize pairwise relationships and correlations
scatter_plots <- ggpairs(input_columns,
title = "Scatter Plots and Correlations Between Variables",
progress = FALSE)
# Display the scatter plot matrix
print(scatter_plots)
# Load necessary libraries
library(gridExtra)
library(GGally)
# Load the dataset (update the path accordingly)
data <- read.csv("E:/R Task/Task 1/data_03cf4b0d-8941-4323-998c-a7ff1a83d0f2_1733812247131.csv")
# Extract input columns (x1, x3, x4, x5) and output (x2)
input_columns <- data[, c("x1", "x3", "x4", "x5")]
output_column <- data[, "x2"]
# Create a time variable
time_variable <- 1:nrow(data)
# Time Series Plot Function
time_series_plots <- function(data, time_var, input = TRUE) {
plot_list <- list()
if (input) {
# Plot for input variables
for (i in 1:ncol(data)) {
p <- ggplot(data = data.frame(Time = time_var, Value = data[, i]),
aes(x = Time, y = Value)) +
geom_line(color = "blue") +
ggtitle(paste("Time Series Plot of Input -", colnames(data)[i])) +
xlab("Time (Index)") +
ylab("Expression Level") +
theme_minimal()
plot_list[[i]] <- p
}
} else {
# Plot for output variable (x2)
p <- ggplot(data = data.frame(Time = time_var, Value = data),
aes(x = Time, y = Value)) +
geom_line(color = "red") +
ggtitle("Time Series Plot of Output - x2") +
xlab("Time (Index)") +
ylab("Output (x2)") +
theme_minimal()
plot_list[[1]] <- p
}
return(plot_list)
}
# Generate and print time series plots for inputs (x1, x3, x4, x5)
input_plots <- time_series_plots(input_columns, time_variable, input = TRUE)
output_plots <- time_series_plots(output_column, time_variable, input = FALSE)
# Display input plots
for (p in input_plots) {
print(p)
}
# Display output plot (x2)
for (p in output_plots) {
print(p)
}
# Distribution Plots for input columns (x1, x3, x4, x5)
distribution_plots <- function(data) {
plot_list <- list()
for (i in 1:ncol(data)) {
p <- ggplot(data = data.frame(Value = data[, i]),
aes(x = Value)) +
geom_histogram(bins = 20, fill = "blue", color = "black", alpha = 0.7) +
ggtitle(paste("Distribution of", colnames(data)[i])) +
xlab("Expression Level") +
ylab("Frequency") +
theme_minimal()
plot_list[[i]] <- p
}
return(plot_list)
}
# Generate and display distribution plots for input columns
dist_plots <- distribution_plots(input_columns)
for (p in dist_plots) {
print(p)
}
# Load necessary libraries
library(ggplot2)
library(gridExtra)
library(GGally)
# Load the dataset (update the path accordingly)
data <- read.csv("E:/R Task/Task 1/data_03cf4b0d-8941-4323-998c-a7ff1a83d0f2_1733812247131.csv")
# Extract input columns (x1, x3, x4, x5) and output (x2)
input_columns <- data[, c("x1", "x3", "x4", "x5")]
output_column <- data[, "x2"]
# Create a time variable
time_variable <- 1:nrow(data)
# Time Series Plot Function
time_series_plots <- function(data, time_var, input = TRUE) {
plot_list <- list()
if (input) {
# Plot for input variables
for (i in 1:ncol(data)) {
p <- ggplot(data = data.frame(Time = time_var, Value = data[, i]),
aes(x = Time, y = Value)) +
geom_line(color = "blue") +
ggtitle(paste("Time Series Plot of Input -", colnames(data)[i])) +
xlab("Time (Index)") +
ylab("Expression Level") +
theme_minimal()
plot_list[[i]] <- p
}
} else {
# Plot for output variable (x2)
p <- ggplot(data = data.frame(Time = time_var, Value = data),
aes(x = Time, y = Value)) +
geom_line(color = "red") +
ggtitle("Time Series Plot of Output - x2") +
xlab("Time (Index)") +
ylab("Output (x2)") +
theme_minimal()
plot_list[[1]] <- p
}
return(plot_list)
}
# Generate and print time series plots for inputs (x1, x3, x4, x5)
input_plots <- time_series_plots(input_columns, time_variable, input = TRUE)
output_plots <- time_series_plots(output_column, time_variable, input = FALSE)
# Display input plots
for (p in input_plots) {
print(p)
}
# Display output plot (x2)
for (p in output_plots) {
print(p)
}
# Distribution Plots for input columns (x1, x3, x4, x5)
distribution_plots <- function(data) {
plot_list <- list()
for (i in 1:ncol(data)) {
p <- ggplot(data = data.frame(Value = data[, i]),
aes(x = Value)) +
geom_histogram(bins = 20, fill = "blue", color = "black", alpha = 0.7) +
ggtitle(paste("Distribution of", colnames(data)[i])) +
xlab("Expression Level") +
ylab("Frequency") +
theme_minimal()
plot_list[[i]] <- p
}
return(plot_list)
}
# Generate and display distribution plots for input columns
dist_plots <- distribution_plots(input_columns)
for (p in dist_plots) {
print(p)
}
# Distribution plot for the output (x2)
output_dist_plot <- ggplot(data = data.frame(Value = output_column), aes(x = Value)) +
geom_histogram(bins = 20, fill = "red", color = "black", alpha = 0.7) +
ggtitle("Distribution of Output - x2") +
xlab("Output (x2)") +
ylab("Frequency") +
theme_minimal()
# Display output distribution plot
print(output_dist_plot)
# Compute the correlation matrix for the selected columns
correlation_matrix <- cor(input_columns)
# Print the correlation matrix
print("Correlation Matrix:")
print(correlation_matrix)
# Scatter plots using GGpairs to visualize pairwise relationships and correlations
scatter_plots <- ggpairs(input_columns,
title = "Scatter Plots and Correlations Between Variables",
progress = FALSE)
# Display the scatter plot matrix
print(scatter_plots)
# Save the scatter plot matrix as a PDF file (optional)
ggsave("scatter_plots_matrix.pdf", plot = scatter_plots)
# Load necessary libraries
library(ggplot2)
library(GGally)
# Load the dataset (make sure the path is correct)
data <- read.csv("E:/R Task/Task 1/data_03cf4b0d-8941-4323-998c-a7ff1a83d0f2_1733812247131.csv")
# Check the structure of the data to ensure it loads correctly
str(data)
# Extract input columns (x1, x3, x4, x5) and output (x2)
input_columns <- data[, c("x1", "x3", "x4", "x5")]
output_column <- data[, "x2"]
# Create a time variable (assuming each row is a time step)
time_variable <- 1:nrow(data)
# Time Series Plot Function
time_series_plots <- function(data, time_var, input = TRUE) {
plot_list <- list()
if (input) {
# Plot for input variables
for (i in 1:ncol(data)) {
p <- ggplot(data = data.frame(Time = time_var, Value = data[, i]),
aes(x = Time, y = Value)) +
geom_line(color = "blue") +
ggtitle(paste("Time Series Plot of Input -", colnames(data)[i])) +
xlab("Time (Index)") +
ylab("Expression Level") +
theme_minimal()
plot_list[[i]] <- p
}
} else {
# Plot for output variable (x2)
p <- ggplot(data = data.frame(Time = time_var, Value = data),
aes(x = Time, y = Value)) +
geom_line(color = "red") +
ggtitle("Time Series Plot of Output - x2") +
xlab("Time (Index)") +
ylab("Output (x2)") +
theme_minimal()
plot_list[[1]] <- p
}
return(plot_list)
}
# Generate and print time series plots for inputs (x1, x3, x4, x5)
input_plots <- time_series_plots(input_columns, time_variable, input = TRUE)
output_plots <- time_series_plots(output_column, time_variable, input = FALSE)
# Display input plots
for (p in input_plots) {
print(p)
}
# Display output plot (x2)
for (p in output_plots) {
print(p)
}
# Distribution Plots for input columns (x1, x3, x4, x5)
distribution_plots <- function(data) {
plot_list <- list()
for (i in 1:ncol(data)) {
p <- ggplot(data = data.frame(Value = data[, i]),
aes(x = Value)) +
geom_histogram(bins = 20, fill = "blue", color = "black", alpha = 0.7) +
ggtitle(paste("Distribution of", colnames(data)[i])) +
xlab("Expression Level") +
ylab("Frequency") +
theme_minimal()
plot_list[[i]] <- p
}
return(plot_list)
}
# Generate and display distribution plots for input columns
dist_plots <- distribution_plots(input_columns)
for (p in dist_plots) {
print(p)
}
# Load necessary libraries
library(ggplot2)
library(tseries)  # For time series analysis functions
# Load necessary libraries
library(ggplot2)
library(tseries)  # For time series analysis functions
# Load the dataset (ensure the path is correct)
data <- read.csv("E:/R Task/Task 1/data_03cf4b0d-8941-4323-998c-a7ff1a83d0f2_1733812247131.csv")
# Check the structure of the dataset
str(data)
# Extract input columns (x1, x3, x4, x5) and output (x2)
input_columns <- data[, c("x1", "x3", "x4", "x5")]
output_column <- data[, "x2"]
# Create a time variable (assuming each row represents a time step)
time_variable <- 1:nrow(data)
# Time Series Plot Function
time_series_plots <- function(data, time_var, input = TRUE) {
plot_list <- list()
if (input) {
# Plot for input variables (x1, x3, x4, x5)
for (i in 1:ncol(data)) {
p <- ggplot(data = data.frame(Time = time_var, Value = data[, i]),
aes(x = Time, y = Value)) +
geom_line(color = "blue") +
ggtitle(paste("Time Series Plot of Input -", colnames(data)[i])) +
xlab("Time (Index)") +
ylab("Expression Level") +
theme_minimal()
plot_list[[i]] <- p
}
} else {
# Plot for output variable (x2)
p <- ggplot(data = data.frame(Time = time_var, Value = data),
aes(x = Time, y = Value)) +
geom_line(color = "red") +
ggtitle("Time Series Plot of Output - x2") +
xlab("Time (Index)") +
ylab("Output (x2)") +
theme_minimal()
plot_list[[1]] <- p
}
return(plot_list)
}
# Generate and print time series plots for inputs (x1, x3, x4, x5)
input_plots <- time_series_plots(input_columns, time_variable, input = TRUE)
output_plots <- time_series_plots(output_column, time_variable, input = FALSE)
# Display input plots
for (p in input_plots) {
print(p)
}
# Display output plot (x2)
for (p in output_plots) {
print(p)
}
# Time Series Decomposition (trend, seasonality, and residuals)
decompose_time_series <- function(input_data, col_name) {
ts_data <- ts(input_data, frequency = 12)  # Assuming monthly data, adjust frequency as necessary
decomposition <- decompose(ts_data)
# Plot the decomposed time series
plot(decomposition, main = paste("Decomposition of", col_name))
}
# Decompose time series for each input variable
for (i in 1:ncol(input_columns)) {
decompose_time_series(input_columns[, i], colnames(input_columns)[i])
}
# Autocorrelation and Partial Autocorrelation Plots
acf_pacf_plots <- function(input_data, col_name) {
ts_data <- ts(input_data, frequency = 12)  # Adjust frequency for your data
# ACF and PACF plots
acf(ts_data, main = paste("ACF for", col_name))
pacf(ts_data, main = paste("PACF for", col_name))
}
# Generate ACF and PACF plots for each input variable
for (i in 1:ncol(input_columns)) {
acf_pacf_plots(input_columns[, i], colnames(input_columns)[i])
}
# Load necessary libraries
library(ggplot2)
library(GGally)
# Load the dataset (make sure the path is correct)
data <- read.csv("E:/R Task/Task 1/data_03cf4b0d-8941-4323-998c-a7ff1a83d0f2_1733812247131.csv")
# Check the structure of the data to ensure it loads correctly
str(data)
# Extract input columns (x1, x3, x4, x5) and output (x2)
input_columns <- data[, c("x1", "x3", "x4", "x5")]
output_column <- data[, "x2"]
# Create a time variable (assuming each row is a time step)
time_variable <- 1:nrow(data)
# Time Series Plot Function
time_series_plots <- function(data, time_var, input = TRUE) {
plot_list <- list()
if (input) {
# Plot for input variables
for (i in 1:ncol(data)) {
p <- ggplot(data = data.frame(Time = time_var, Value = data[, i]),
aes(x = Time, y = Value)) +
geom_line(color = "blue") +
ggtitle(paste("Time Series Plot of Input -", colnames(data)[i])) +
xlab("Time (Index)") +
ylab("Expression Level") +
theme_minimal()
plot_list[[i]] <- p
}
} else {
# Plot for output variable (x2)
p <- ggplot(data = data.frame(Time = time_var, Value = data),
aes(x = Time, y = Value)) +
geom_line(color = "red") +
ggtitle("Time Series Plot of Output - x2") +
xlab("Time (Index)") +
ylab("Output (x2)") +
theme_minimal()
plot_list[[1]] <- p
}
return(plot_list)
}
# Generate and print time series plots for inputs (x1, x3, x4, x5)
input_plots <- time_series_plots(input_columns, time_variable, input = TRUE)
output_plots <- time_series_plots(output_column, time_variable, input = FALSE)
# Display input plots
for (p in input_plots) {
print(p)
}
# Load necessary libraries
library(ggplot2)
library(GGally)
# Load the dataset (make sure the path is correct)
data <- read.csv("E:/R Task/Task 1/data_03cf4b0d-8941-4323-998c-a7ff1a83d0f2_1733812247131.csv")
# Check the structure of the data to ensure it loads correctly
str(data)
# Extract input columns (x1, x3, x4, x5) and output (x2)
input_columns <- data[, c("x1", "x3", "x4", "x5")]
output_column <- data[, "x2"]
# Create a time variable (assuming each row is a time step)
time_variable <- 1:nrow(data)
# Time Series Plot Function
time_series_plots <- function(data, time_var, input = TRUE) {
plot_list <- list()
if (input) {
# Plot for input variables
for (i in 1:ncol(data)) {
p <- ggplot(data = data.frame(Time = time_var, Value = data[, i]),
aes(x = Time, y = Value)) +
geom_line(color = "blue") +
ggtitle(paste("Time Series Plot of Input -", colnames(data)[i])) +
xlab("Time (Index)") +
ylab("Expression Level") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))  # Center the title
plot_list[[i]] <- p
}
} else {
# Plot for output variable (x2)
p <- ggplot(data = data.frame(Time = time_var, Value = data),
aes(x = Time, y = Value)) +
geom_line(color = "red") +
ggtitle("Time Series Plot of Output - x2") +
xlab("Time (Index)") +
ylab("Output (x2)") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))  # Center the title
plot_list[[1]] <- p
}
return(plot_list)
}
# Generate and print time series plots for inputs (x1, x3, x4, x5)
input_plots <- time_series_plots(input_columns, time_variable, input = TRUE)
output_plots <- time_series_plots(output_column, time_variable, input = FALSE)
# Display input plots
for (p in input_plots) {
print(p)
}
# Display output plot (x2)
for (p in output_plots) {
print(p)
}
# Distribution Plots for input columns (x1, x3, x4, x5)
distribution_plots <- function(data) {
plot_list <- list()
for (i in 1:ncol(data)) {
p <- ggplot(data = data.frame(Value = data[, i]),
aes(x = Value)) +
geom_histogram(bins = 20, fill = "blue", color = "black", alpha = 0.7) +
ggtitle(paste("Distribution of", colnames(data)[i])) +
xlab("Expression Level") +
ylab("Frequency") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))  # Center the title
plot_list[[i]] <- p
}
return(plot_list)
}
# Generate and display distribution plots for input columns
dist_plots <- distribution_plots(input_columns)
for (p in dist_plots) {
print(p)
}
# Distribution plot for the output (x2)
output_dist_plot <- ggplot(data = data.frame(Value = output_column), aes(x = Value)) +
geom_histogram(bins = 20, fill = "red", color = "black", alpha = 0.7) +
ggtitle("Distribution of Output - x2") +
xlab("Output (x2)") +
ylab("Frequency") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))  # Center the title
# Display output distribution plot
print(output_dist_plot)
# Compute the correlation matrix for the selected columns
correlation_matrix <- cor(input_columns)
# Print the correlation matrix
print("Correlation Matrix:")
print(correlation_matrix)
# Scatter plots using GGpairs to visualize pairwise relationships and correlations
scatter_plots <- ggpairs(input_columns,
title = "Scatter Plots and Correlations Between Variables",
progress = FALSE)
# Display the scatter plot matrix
print(scatter_plots)
# Save the scatter plot matrix as a PDF file (optional)
ggsave("scatter_plots_matrix.pdf", plot = scatter_plots)
# Optionally, save all plots for input variables as individual images
for (i in 1:length(input_plots)) {
ggsave(paste("time_series_input_", colnames(input_columns)[i], ".pdf", sep = ""),
plot = input_plots[[i]], height = 4, width = 6)
}
